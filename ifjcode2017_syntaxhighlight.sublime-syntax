%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - .ifjcode2016
scope: source.example-c

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: numbers
    - include: strings
    - include: frames
    - include: vars
    - include: labels
    - include: keywords

  labels:
    - match: '(?i)(call|label|jump|jumpifeq|jumpifneq|jumpifeqs|jumpifneqs)(\s+)([\w_\-\$&%*]+)'
      captures: 
        1: keyword.control.example-c
        3: support.function.example-c

  frames:
    - match: '\b[LGT]F@'
      scope: entity.name.example-c

  vars:
    - match: '(?<=[LGT]F@)[\w_\-\$&%*]+'
      scope: variable.parameter.example-c

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '(?i)\b(move|createframe|pushframe|popframe|defvar|call|return|pushs|pops|clears|add|sub|mul|div|adds|subs|muls|divs|lt|gt|eq|lts|gts|eqs|and|or|not|ands|ors|nots|int2float|float2int|float2r2eint|float2roint|int2char|str2int|int2floats|float2ints|float2r2eints|float2roints|int2chars|str2ints|read|write|concat|strlen|getchar|setchar|type|label|jump|jumpifeq|jumpifneq|jumpifeqs|jumpifneqs|break|dprint)\b'
      scope: keyword.control.example-c

  numbers:
    - match: '\b(float|int)(@)(-?[0-9.]+)\b'
      captures: 
        1: constant.numeric
        3: constant.numeric.example-c

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '(?i)string@.*'
      scope: punctuation.definition.string.begin.example-c
      push: inside_string


  inside_string:
    - meta_include_prototype: false
    - meta_scope: constant.numeric
    - match: 'FOO'
      scope: constant.numeric #constant.character.escape.example-c
    - match: $\n?
      scope: constant.numeric
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '#'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: $\n?
          pop: true
