%YAML 1.2
file_extensions: [IFJcode17, IFJcode2017]
scope: source
first_line_match: .IFJcode17
variables:
  identifier: '[\w_\-\$&%*]+'

contexts:
  prototype:
    - include: comments

  main:
    - include: numbers
    - include: booleans
    - include: strings
    - include: frames
    - include: variables
    - include: labels
    - include: keywords

  labels:
    - match: '(?i)(call|label|jump|jumpifeq|jumpifneq|jumpifeqs|jumpifneqs)(\s+)({{identifier}})'
      captures: 
        1: keyword.control
        3: support.function

  frames:
    - match: '\b[LGT]F@'
      scope: entity.name

  variables:
    - match: '(?<=[LGT]F@){{identifier}}'
      scope: variable.parameter

  keywords:
    - match: '(?i)\b(move|createframe|pushframe|popframe|defvar|call|return|pushs|pops|clears|add|sub|mul|div|adds|subs|muls|divs|lt|gt|eq|lts|gts|eqs|and|or|not|ands|ors|nots|int2float|float2int|float2r2eint|float2roint|int2char|str2int|int2floats|float2ints|float2r2eints|float2roints|int2chars|str2ints|read|write|concat|strlen|getchar|setchar|type|label|jump|jumpifeq|jumpifneq|jumpifeqs|jumpifneqs|break|dprint)\b'
      scope: keyword.control

  numbers:
    - match: '\b(float|int)(@)(-?[0-9.]+)\b'
      captures: 
        1: constant.numeric
        3: constant.numeric

  booleans:
    - match: '\b(bool)(@)((?i)(true|false))\b'
      captures: 
        1: constant.numeric
        3: constant.numeric

  strings:
    - match: '(?i)(string)@(.*)'
      captures: 
        1: punctuation.definition.string.begin
        3: punctuation.definition.string.end
      push: inside_string

  inside_string:
    - meta_include_prototype: true
    - meta_scope: constant.numeric
    - match: \\.
      scope: constant.numeric
    - match: $\n?
      scope: constant.numeric
      pop: true

  comments:
    - match: '#'
      scope: punctuation.definition.comment
      push:
        - meta_scope: comment.line.double-slash
        - match: $\n?
          pop: true
